import pytest

from . import *  # noqa


@pytest.mark.parametrize(
    "other",
    [Object.wall, ord("#")]
)
def test_eq_wall(other):
    assert Object.wall == other


@pytest.fixture
def texts():
    return {
        "small": """\
            ########
            #..O.O.#
            ##@.O..#
            #...O..#
            #.#.O..#
            #...O..#
            #......#
            ########

            <^^>>>vv<v>>v<<
        """,
        "large": """\
            ##########
            #..O..O.O#
            #......O.#
            #.OO..O.O#
            #..O@..O.#
            #O#..O...#
            #O..O..O.#
            #.OO.O.OO#
            #....O...#
            ##########

            <vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
            vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
            ><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
            <<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
            ^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
            ^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
            >^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
            <><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
            ^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
            v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^
        """
    }


@pytest.fixture
def games(texts):
    return {name: Game.parse(text) for name, text in texts.items()}


w = Object.wall
_ = Object.empty
b = Object.box
r = Object.robot
C = Object.wide_left
O = Object.wide_right
L = Move.left
R = Move.right
U = Move.up
D = Move.down


@pytest.mark.parametrize(
    "name,expected",
    [
        (
            "small",
            Game(
                warehouse=Warehouse([
                    [w, w, w, w, w, w, w, w],
                    [w, _, _, b, _, b, _, w],
                    [w, w, r, _, b, _, _, w],
                    [w, _, _, _, b, _, _, w],
                    [w, _, w, _, b, _, _, w],
                    [w, _, _, _, b, _, _, w],
                    [w, _, _, _, _, _, _, w],
                    [w, w, w, w, w, w, w, w],
                ]),
                moves=[L, U, U, R, R, R, D, D, L, D, R, R, D, L, L]
            )
        ),
        (
            "large",
            Game(
                warehouse=Warehouse([
                    [w, w, w, w, w, w, w, w, w, w],
                    [w, _, _, b, _, _, b, _, b, w],
                    [w, _, _, _, _, _, _, b, _, w],
                    [w, _, b, b, _, _, b, _, b, w],
                    [w, _, _, b, r, _, _, b, _, w],
                    [w, b, w, _, _, b, _, _, _, w],
                    [w, b, _, _, b, _, _, b, _, w],
                    [w, _, b, b, _, b, _, b, b, w],
                    [w, _, _, _, _, b, _, _, _, w],
                    [w, w, w, w, w, w, w, w, w, w],
                ]),
                moves=[
                    L, D, D, R, U, L, D, U, R, D, R, U, D, D,
                    U, D, R, D, L, R, D, U, D, L, D, L, U, D,
                    D, L, L, L, U, R, L, L, R, L, R, R, D, L,
                    D, D, D, L, R, U, D, U, R, U, L, L, L, R,
                    L, L, D, L, L, L, D, U, D, D, U, D, R, U,
                    D, D, D, L, L, U, R, U, D, U, U, R, L, L,
                    R, R, R, L, R, U, L, L, R, L, U, D, D, U,
                    U, L, R, D, D, D, L, R, R, L, U, U, D, R,
                    U, R, D, D, L, R, D, L, L, L, L, D, L, U,
                    D, R, U, L, U, U, R, R, R, U, L, D, L, D,
                    R, L, R, D, D, R, D, U, D, U, L, R, R, L,
                    R, R, R, R, L, U, U, R, D, D, R, D, L, U,
                    U, U, R, R, D, U, D, U, L, U, U, R, D, U,
                    U, R, D, U, L, U, D, R, D, L, R, R, D, U,
                    D, U, L, D, R, D, U, U, L, U, U, D, D, L,
                    L, L, D, L, U, R, R, U, U, U, U, R, R, R,
                    D, U, L, R, D, D, D, U, R, L, D, L, L, L,
                    R, U, U, U, D, D, U, L, D, D, D, R, U, R,
                    D, L, U, U, U, U, D, L, R, U, R, D, D, D,
                    D, R, L, R, R, D, U, L, L, U, U, U, U, U,
                    U, R, L, U, R, L, R, R, R, L, R, U, U, L,
                    L, U, U, D, R, R, R, L, U, L, D, R, U, L,
                    D, D, R, R, D, R, R, R, U, D, R, L, R, U,
                    D, R, L, L, L, L, D, R, R, D, L, D, L, D,
                    R, D, D, D, R, U, L, R, L, L, R, U, R, L,
                    U, R, R, L, R, U, D, L, R, L, U, D, D, D,
                    L, U, U, L, R, L, D, L, L, L, L, L, R, L,
                    U, D, L, L, L, R, L, L, L, U, U, L, D, L,
                    U, U, U, R, L, U, R, R, U, L, D, U, R, L,
                    L, L, U, R, R, U, D, L, D, U, D, L, D, U,
                    R, U, R, R, U, D, R, D, D, R, U, L, L, U,
                    D, L, R, R, L, L, R, L, L, D, L, L, D, R,
                    L, R, D, L, U, D, D, L, L, L, R, U, U, D,
                    U, R, U, U, R, R, R, L, L, U, D, R, R, D,
                    U, D, R, L, U, U, R, R, U, L, R, D, D, U,
                    L, R, L, U, U, R, U, U, U, L, R, L, D, D,
                    D, D, D, U, D, L, D, L, L, R, U, D, L, D,
                    R, D, L, L, U, R, L, L, R, L, L, R, L, L,
                    L, U, U, L, L, L, U, L, L, R, R, L, L, R,
                    L, U, U, U, R, U, U, L, R, U, R, D, L, R,
                    U, U, R, D, D, L, U, D, U, D, L, D, D, R,
                    U, L, R, L, D, L, U, D, R, U, U, U, R, R,
                    R, U, U, D, D, D, U, R, D, D, D, L, R, R,
                    R, U, L, U, R, R, R, R, R, U, L, L, U, D,
                    R, U, D, D, D, L, R, U, L, R, L, L, D, R,
                    D, U, U, R, R, R, L, L, U, U, L, R, R, U,
                    D, U, L, D, U, D, D, L, R, D, U, L, L, R,
                    U, L, U, D, U, D, R, L, U, L, L, L, R, L,
                    L, U, L, D, R, L, D, L, R, D, D, R, R, D,
                    R, L, D, U, L, D, D, L, R, D, U, L, L, U,
                ]
            )
        )
    ]
)
def test_game_parse(expected, name, games):
    game = games[name]
    assert expected == game


@pytest.mark.parametrize(
    "num_moves,expected",
    list(enumerate([
        # Initial state
        """
        ########
        #..O.O.#
        ##@.O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 01 Move <:
        """
        ########
        #..O.O.#
        ##@.O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 02 Move ^:
        """
        ########
        #.@O.O.#
        ##..O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 03 Move ^:
        """
        ########
        #.@O.O.#
        ##..O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 04 Move >:
        """
        ########
        #..@OO.#
        ##..O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 05 Move >:
        """
        ########
        #...@OO#
        ##..O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 06 Move >:
        """
        ########
        #...@OO#
        ##..O..#
        #...O..#
        #.#.O..#
        #...O..#
        #......#
        ########
        """,
        # 07 Move v:
        """
        ########
        #....OO#
        ##..@..#
        #...O..#
        #.#.O..#
        #...O..#
        #...O..#
        ########
        """,
        # 08 Move v:
        """
        ########
        #....OO#
        ##..@..#
        #...O..#
        #.#.O..#
        #...O..#
        #...O..#
        ########
        """,
        # 09 Move <:
        """
        ########
        #....OO#
        ##.@...#
        #...O..#
        #.#.O..#
        #...O..#
        #...O..#
        ########
        """,
        # 10 Move v:
        """
        ########
        #....OO#
        ##.....#
        #..@O..#
        #.#.O..#
        #...O..#
        #...O..#
        ########
        """,
        # 11 Move >:
        """
        ########
        #....OO#
        ##.....#
        #...@O.#
        #.#.O..#
        #...O..#
        #...O..#
        ########
        """,
        # 12 Move >:
        """
        ########
        #....OO#
        ##.....#
        #....@O#
        #.#.O..#
        #...O..#
        #...O..#
        ########
        """,
        # 13 Move v:
        """
        ########
        #....OO#
        ##.....#
        #.....O#
        #.#.O@.#
        #...O..#
        #...O..#
        ########
        """,
        # 14 Move <:
        """
        ########
        #....OO#
        ##.....#
        #.....O#
        #.#O@..#
        #...O..#
        #...O..#
        ########
        """,
        # 15 Move <:
        """
        ########
        #....OO#
        ##.....#
        #.....O#
        #.#O@..#
        #...O..#
        #...O..#
        ########
        """
    ]))
)
def test_moves_small(expected, num_moves, games):
    play = games["small"].play()
    for _ in range(num_moves):
        play.move()
    assert np.all(Warehouse.parse(expected) == play.warehouse)


def test_game_large(games):
    play = games["large"].play().run()
    expected = """\
        ##########
        #.O.O.OOO#
        #........#
        #OO......#
        #OO@.....#
        #O#.....O#
        #O.....OO#
        #O.....OO#
        #OO....OO#
        ##########
    """
    assert np.all(Warehouse.parse(expected) == play.warehouse)


def test_gps(games):
    assert {
        102, 104, 106, 107, 108,
        301, 302,
        401, 402,
        501, 508,
        601, 607, 608,
        701, 707, 708,
        801, 802, 807, 808,
    } == set(games["large"].play().run().warehouse.boxes())


def test_sum_gps(games):
    assert 10092 == sum(games["large"].play().run().warehouse.boxes())


@pytest.mark.parametrize(
    "text,expected",
    [
        (
            """\
            ##############
            ##......##..##
            ##..........##
            ##....[][]@.##
            ##....[]....##
            ##..........##
            ##############
            """,
            Warehouse([
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w],
                [w, w, _, _, _, _, _, _, w, w, _, _, w, w],
                [w, w, _, _, _, _, _, _, _, _, _, _, w, w],
                [w, w, _, _, _, _, C, O, C, O, r, _, w, w],
                [w, w, _, _, _, _, C, O, _, _, _, _, w, w],
                [w, w, _, _, _, _, _, _, _, _, _, _, w, w],
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w],
            ])
        ),
        (
            """\
            ####################
            ##....[]....[]..[]##
            ##............[]..##
            ##..[][]....[]..[]##
            ##....[]@.....[]..##
            ##[]##....[]......##
            ##[]....[]....[]..##
            ##..[][]..[]..[][]##
            ##........[]......##
            ####################
            """,
            Warehouse([
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w],
                [w, w, _, _, _, _, C, O, _, _, _, _, C, O, _, _, C, O, w, w],
                [w, w, _, _, _, _, _, _, _, _, _, _, _, _, C, O, _, _, w, w],
                [w, w, _, _, C, O, C, O, _, _, _, _, C, O, _, _, C, O, w, w],
                [w, w, _, _, _, _, C, O, r, _, _, _, _, _, C, O, _, _, w, w],
                [w, w, C, O, w, w, _, _, _, _, C, O, _, _, _, _, _, _, w, w],
                [w, w, C, O, _, _, _, _, C, O, _, _, _, _, C, O, _, _, w, w],
                [w, w, _, _, C, O, C, O, _, _, C, O, _, _, C, O, C, O, w, w],
                [w, w, _, _, _, _, _, _, _, _, C, O, _, _, _, _, _, _, w, w],
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w],
            ])
        ),
    ]
)
def test_parse_wide(expected, text):
    assert np.all(expected == Warehouse.parse(text))


@pytest.mark.parametrize(
    "name,expected",
    [
        (
            "small",
            Warehouse([
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w],
                [w, w, _, _, _, _, C, O, _, _, C, O, _, _, w, w],
                [w, w, w, w, r, _, _, _, C, O, _, _, _, _, w, w],
                [w, w, _, _, _, _, _, _, C, O, _, _, _, _, w, w],
                [w, w, _, _, w, w, _, _, C, O, _, _, _, _, w, w],
                [w, w, _, _, _, _, _, _, C, O, _, _, _, _, w, w],
                [w, w, _, _, _, _, _, _, _, _, _, _, _, _, w, w],
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w],
            ])
        ),
        (
            "large",
            Warehouse([
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w],
                [w, w, _, _, _, _, C, O, _, _, _, _, C, O, _, _, C, O, w, w],
                [w, w, _, _, _, _, _, _, _, _, _, _, _, _, C, O, _, _, w, w],
                [w, w, _, _, C, O, C, O, _, _, _, _, C, O, _, _, C, O, w, w],
                [w, w, _, _, _, _, C, O, r, _, _, _, _, _, C, O, _, _, w, w],
                [w, w, C, O, w, w, _, _, _, _, C, O, _, _, _, _, _, _, w, w],
                [w, w, C, O, _, _, _, _, C, O, _, _, _, _, C, O, _, _, w, w],
                [w, w, _, _, C, O, C, O, _, _, C, O, _, _, C, O, C, O, w, w],
                [w, w, _, _, _, _, _, _, _, _, C, O, _, _, _, _, _, _, w, w],
                [w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w, w],
            ])
        )
    ]
)
def test_widen(expected, name, games):
    game = games[name]
    wide = game.widen()
    assert np.all(expected == wide.warehouse)
    assert game.moves == wide.moves


@pytest.mark.parametrize(
    "num_moves,expected",
    list(enumerate([
        # 00 Initial state:
        """
        ##############
        ##......##..##
        ##..........##
        ##....[][]@.##
        ##....[]....##
        ##..........##
        ##############
        """,
        # 01 Move <:
        """
        ##############
        ##......##..##
        ##..........##
        ##...[][]@..##
        ##....[]....##
        ##..........##
        ##############
        """,
        # 02 Move v:
        """
        ##############
        ##......##..##
        ##..........##
        ##...[][]...##
        ##....[].@..##
        ##..........##
        ##############
        """,
        # 03 Move v:
        """
        ##############
        ##......##..##
        ##..........##
        ##...[][]...##
        ##....[]....##
        ##.......@..##
        ##############
        """,
        # 04 Move <:
        """
        ##############
        ##......##..##
        ##..........##
        ##...[][]...##
        ##....[]....##
        ##......@...##
        ##############
        """,
        # 05 Move <:
        """
        ##############
        ##......##..##
        ##..........##
        ##...[][]...##
        ##....[]....##
        ##.....@....##
        ##############
        """,
        # 06 Move ^:
        """
        ##############
        ##......##..##
        ##...[][]...##
        ##....[]....##
        ##.....@....##
        ##..........##
        ##############
        """,
        # 07 Move ^:
        """
        ##############
        ##......##..##
        ##...[][]...##
        ##....[]....##
        ##.....@....##
        ##..........##
        ##############
        """,
        # 08 Move <:
        """
        ##############
        ##......##..##
        ##...[][]...##
        ##....[]....##
        ##....@.....##
        ##..........##
        ##############
        """,
        # 09 Move <:
        """
        ##############
        ##......##..##
        ##...[][]...##
        ##....[]....##
        ##...@......##
        ##..........##
        ##############
        """,
        # 10 Move ^:
        """
        ##############
        ##......##..##
        ##...[][]...##
        ##...@[]....##
        ##..........##
        ##..........##
        ##############
        """,
        # 11 Move ^:
        """
        ##############
        ##...[].##..##
        ##...@.[]...##
        ##....[]....##
        ##..........##
        ##..........##
        ##############
        """,
    ]))
)
def test_moves_3boxes_wide(expected, num_moves):
    play = Game.parse(
        """\
        #######
        #...#.#
        #.....#
        #..OO@#
        #..O..#
        #.....#
        #######

        <vv<<^^<<^^
        """
    ).widen().play()
    for _ in range(num_moves):
        play.move()
    assert np.all(Warehouse.parse(expected) == play.warehouse)


@pytest.fixture
def game_large_wide(games):
    return games["large"].widen()


@pytest.mark.parametrize(
    "num_moves,expected",
    list(enumerate([
        # 00 - Initial state
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##....[]@.....[]..##
        ##[]##....[]......##
        ##[]....[]....[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 01 - <
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[]@......[]..##
        ##[]##....[]......##
        ##[]....[]....[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 02 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##.@..[]......##
        ##[]....[]....[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 03 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]...@[]....[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 04 - >
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]....@[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 05 - ^
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##..@.[]......##
        ##[].....[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 06 - <
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##.@..[]......##
        ##[].....[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 07 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]...@.[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 08 - ^
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##.@..[]......##
        ##[].....[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 09 - >
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##..@.[]......##
        ##[].....[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 10 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]....@[]...[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 11 - >
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[].....@[]..[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 12 - ^
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##...@[]......##
        ##[]......[]..[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 13 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[].....@[]..[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 14 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][].@[]..[][]##
        ##........[]......##
        ####################
        """,
        # 15 - ^
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[].....@[]..[]..##
        ##..[][]..[]..[][]##
        ##........[]......##
        ####################
        """,
        # 16 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][].@[]..[][]##
        ##........[]......##
        ####################
        """,
        # 17 - >
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][]..@[].[][]##
        ##........[]......##
        ####################
        """,
        # 18 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][]..@[].[][]##
        ##........[]......##
        ####################
        """,
        # 19 - <
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][].@.[].[][]##
        ##........[]......##
        ####################
        """,
        # 20 - >
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][]..@[].[][]##
        ##........[]......##
        ####################
        """,
        # 21 - v
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[].......[]..##
        ##[]##....[]......##
        ##[]......[]..[]..##
        ##..[][]..@[].[][]##
        ##........[]......##
        ####################
        """,
        # 22 - ^
        """\
        ####################
        ##....[]....[]..[]##
        ##............[]..##
        ##..[][]....[]..[]##
        ##...[]...[]..[]..##
        ##[]##....[]......##
        ##[]......@...[]..##
        ##..[][]...[].[][]##
        ##........[]......##
        ####################
        """,
        # 23 - v
        # 24 - <
        # 25 - v
        # 26 - <
        # 27 - ^
        # 28 - v
        # 29 - v
        # 30 - <
        # 31 - <
        # 32 - <
        # 33 - ^
        # 34 - >
        # 35 - <
        # 36 - <
        # 37 - >
        # 38 - <
        # 39 - >
        # 40 - >
        # 41 - v
        # 42 - <
        # 43 - v
        # 44 - v
        # 45 - v
        # 46 - <
        # 47 - >
        # 48 - ^
        # 49 - v
        # 50 - ^
        # 51 - >
        # 52 - ^
        # 53 - <
        # 54 - <
        # 55 - <
        # 56 - >
        # 57 - <
        # 58 - <
        # 59 - v
        # 60 - <
        # 61 - <
        # 62 - <
        # 63 - v
        # 64 - ^
        # 65 - v
        # 66 - v
        # 67 - ^
        # 68 - v
        # 69 - >
        # 70 - ^
    ]))
)
def test_moves_large_wide(expected, num_moves, game_large_wide):
    play = game_large_wide.play()
    for _ in range(num_moves):
        play.move()
    assert np.all(Warehouse.parse(expected) == play.warehouse)


def test_game_large_wide(game_large_wide):
    play = game_large_wide.play().run()
    expected = Warehouse.parse(
        """\
        ####################
        ##[].......[].[][]##
        ##[]...........[].##
        ##[]........[][][]##
        ##[]......[]....[]##
        ##..##......[]....##
        ##..[]............##
        ##..@......[].[][]##
        ##......[][]..[]..##
        ####################
        """
    )
    assert np.all(expected == play.warehouse)


def test_gps_wide(game_large_wide):
    assert {
        102, 111, 114, 116,
        202, 215,
        302, 312, 314, 316,
        402, 410, 416,
        512,
        604,
        711, 714, 716,
        808, 810, 814,
    } == set(game_large_wide.play().run().warehouse.boxes())


def test_move_blocked_partial():
    text = """\
        ##########
        ##......##
        ####[]..##
        ##.[]...##
        ##..@...##
        ##......##
        ##########

        ^
    """
    game = Game.parse(text)
    play = game.play().run()
    assert np.all(game.warehouse == play.warehouse)


def test_sum_gps_wide(game_large_wide):
    assert 9021 == sum(game_large_wide.play().run().warehouse.boxes())
